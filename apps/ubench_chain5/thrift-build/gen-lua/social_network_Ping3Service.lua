--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'social_network_ttypes'

Ping3ServiceClient = __TObject.new(__TClient, {
  __type = 'Ping3ServiceClient'
})

function Ping3ServiceClient:Ping(flow, timestamp, level, req_id)
  self:send_Ping(flow, timestamp, level, req_id)
  self:recv_Ping(flow, timestamp, level, req_id)
end

function Ping3ServiceClient:send_Ping(flow, timestamp, level, req_id)
  self.oprot:writeMessageBegin('Ping', TMessageType.CALL, self._seqid)
  local args = Ping_args:new{}
  args.flow = flow
  args.timestamp = timestamp
  args.level = level
  args.req_id = req_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function Ping3ServiceClient:recv_Ping(flow, timestamp, level, req_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = Ping_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
Ping3ServiceIface = __TObject:new{
  __type = 'Ping3ServiceIface'
}


Ping3ServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'Ping3ServiceProcessor'
})

function Ping3ServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function Ping3ServiceProcessor:process_Ping(seqid, iprot, oprot, server_ctx)
  local args = Ping_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = Ping_result:new{}
  local status, res = pcall(self.handler.Ping, self.handler, args.flow, args.timestamp, args.level, args.req_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  else
    result.success = res
  end
  oprot:writeMessageBegin('Ping', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

Ping_args = __TObject:new{
  flow,
  timestamp,
  level,
  req_id
}

function Ping_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.BYTE then
        self.flow = iprot:readByte()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.timestamp = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I16 then
        self.level = iprot:readI16()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Ping_args:write(oprot)
  oprot:writeStructBegin('Ping_args')
  if self.flow ~= nil then
    oprot:writeFieldBegin('flow', TType.BYTE, 1)
    oprot:writeByte(self.flow)
    oprot:writeFieldEnd()
  end
  if self.timestamp ~= nil then
    oprot:writeFieldBegin('timestamp', TType.I64, 2)
    oprot:writeI64(self.timestamp)
    oprot:writeFieldEnd()
  end
  if self.level ~= nil then
    oprot:writeFieldBegin('level', TType.I16, 3)
    oprot:writeI16(self.level)
    oprot:writeFieldEnd()
  end
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 4)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Ping_result = __TObject:new{

}

function Ping_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Ping_result:write(oprot)
  oprot:writeStructBegin('Ping_result')
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
return Ping3ServiceClient, Ping3ServiceProcessor